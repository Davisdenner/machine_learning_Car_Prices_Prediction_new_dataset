# -*- coding: utf-8 -*-
"""Prices_Prediction_completo___---

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fJNk4x4vKLp16yCH-p7cY8BrPUfc5ZtS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df=pd.read_csv('/content/CarPrice_Assignment.csv')

df.head()

# Renomeando a coluna de marca de carros
df['car_brands']=df['CarName'].str.split(' ').str[0]
df.insert(1,'car_brands',df.pop('car_brands'))
df.head()

#Apagando as colunas desnecessárias para a análise
df.drop(['CarName', 'car_ID', 'symboling'], axis=1, inplace=True)

df.head()

df.info()

df['car_brands'].unique()

#Renomeando nome das marcas corretamente.

def fix_company_name(old_name, new_name):
    df['car_brands'].replace(old_name, new_name, inplace=True)

fix_company_name('maxda' , 'mazda')
fix_company_name('nissan' , 'Nissan')
fix_company_name('vw' , 'volkswagen')
fix_company_name('toyouta' , 'toyota')
fix_company_name('porcshce' , 'porsche')
fix_company_name('vokswagen' , 'volkswagen')

df['car_brands'].unique()

df['price'].describe()

#Análise das vendas
plt.title('company_sales')
df['car_brands'].value_counts().plot(kind='bar',color='blue',edgecolor='yellow')

plt.title('fueltype')
df['fueltype'].value_counts().plot(kind='pie',autopct='%1.1f%%',colors=['red','y'],explode=[0,0.3])

df.hist(figsize=(14,14))

df.head()

df.columns

df['fueltype'].unique()

df['enginetype'].unique()

df['cylindernumber'].unique()

df['drivewheel'].unique()

df['fuelsystem'].unique()

df['carbody'].unique()

df.head()

df.columns

#Configurando para int ou float as colunas que estão como dtype = 'object'

df['fueltype']=df['fueltype'].replace({'gas':1,'diesel':0}).astype(int)
df['doornumber']=df['doornumber'].replace({'two':2,'four':4}).astype(int)
df['aspiration']=df['aspiration'].replace({'std':1,'turbo':0}).astype(int)
df['drivewheel']=df['drivewheel'].replace({'fwd':1,'rwd':2,'4wd':3}).astype(int)

df['enginelocation' ]=df['enginelocation'].replace({'front':1,'rear':0}).astype(int)
df['cylindernumber']=df['cylindernumber'].replace({'two':2,'three':3,'four':4,'five':5,'six':6,'eight':8,'twelve':12}).astype(int)

enginetype_dummies=pd.get_dummies(df['enginetype'],drop_first=True,prefix='enginetype')
df=pd.concat([df,enginetype_dummies],axis=1)
df.drop('enginetype',axis=1,inplace=True)

carbody_dummies=pd.get_dummies(df['carbody'],drop_first=True,prefix='carbody')
df=pd.concat([df,carbody_dummies],axis=1)
df.drop('carbody',axis=1,inplace=True)

fuelsystem_dummies=pd.get_dummies(df['fuelsystem'],drop_first=True,prefix='fuelsystem')
df=pd.concat([df,fuelsystem_dummies],axis=1)
df.drop('fuelsystem',axis=1,inplace=True)

df.head()

len(df.columns)

df.info()

#Grafíco de calor
df_corr=df.select_dtypes(include=['int64','float64']).corr()
plt.figure(figsize=(15,14))
sns.heatmap(df_corr,annot=True,cmap='coolwarm', linewidths=0.01)
plt.title('Correlação dos preços do carros')
plt.show()

df_corr['price'].sort_values(ascending=False)

df.columns

data_with_dummies = pd.get_dummies(df, drop_first=True)
data_with_dummies.head()



"""#Modelo de regressão linear
"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

object_columns = df.select_dtypes(include=['object']).columns
encoder = OneHotEncoder(sparse_output=False)
one_hot_encoded = encoder.fit_transform(df[object_columns])
one_hot_df = pd.DataFrame(one_hot_encoded, columns=encoder.get_feature_names_out(object_columns))
car_prices_data_numeric=pd.concat([df, one_hot_df],axis = 1).drop(columns=object_columns)

categorical_features = ['car_brands']
numerical_features = [col for col in df.columns if col not in categorical_features + ['price']]

preprocessor = ColumnTransformer(
    transformers=[
        ('num', 'passthrough', numerical_features),
        ('cat', OneHotEncoder(sparse_output=False, handle_unknown='ignore'), categorical_features),
    ])

y = df["price"]
x = df.drop(["price"], axis=1)
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=.25 , random_state=750)

x_train = preprocessor.fit_transform(x_train)
x_test = preprocessor.transform(x_test)

##Transformando e códificando as features
feature_names = list(numerical_features)
feature_names.extend(preprocessor.named_transformers_['cat'].get_feature_names_out(categorical_features))

x_train = pd.DataFrame(x_train, columns=feature_names)
x_test = pd.DataFrame(x_test, columns=feature_names)

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100,random_state=750)
rf_model.fit(x_train,y_train)

from sklearn.metrics import r2_score
y_pred_rf= rf_model.predict(x_test)
mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)
print(f'Mean Squared Error (MSE) for Random Forest: {mse_rf}')
print(f'R-squared (R2) for Random Forest: {r2_rf}')

sorted_indices = np.argsort(y_test)
y_test_sorted = np.array(y_test)[sorted_indices]
y_pred_sorted = y_pred_rf[sorted_indices]
plt.figure(figsize=(10, 6))
plt.plot(y_test_sorted, label='True Values', marker='o', linestyle='-', color='blue')
plt.plot(y_pred_sorted, label='Predicted Values', marker='x', linestyle='--', color='red')

plt.title('Comparison of True vs Predicted Values')
plt.xlabel('Samples')
plt.ylabel('Values')
plt.legend()
plt.grid(True)

# Salvando o modelo treinado
import pickle
with open('modelo.pkl', 'wb') as f:
    pickle.dump(rf_model, f)

print("Modelo treinado e salvo com sucesso!")

print("Features usadas no modelo:", x.columns.tolist())
print("Total de features:", len(x.columns))







